#!/usr/bin/env node

import { v4 as uuidv4 } from 'uuid';
import bcrypt from 'bcrypt';

async function createTestUsers() {
  console.log('üîß Creating test users for authentication...');
  
  // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Knex
  const { default: knex } = await import('knex');
  
  // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
  const db = knex({
    client: 'postgresql',
    connection: {
      host: 'localhost',
      port: 5432,
      user: 'reki',
      password: 'reki',
      database: 'reki'
    }
  });

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const existingUsers = await db('users').select('username');
    console.log(`üìã Found ${existingUsers.length} existing users`);

    const testUsers = [
      {
        username: 'admin',
        password: 'password',
        email: 'admin@reki.com',
        role: 'admin',
        roles: ['ADMIN', 'USER'],
        permissions: ['ALL_PERMISSIONS', 'READ_PROFILE', 'EDIT_PROFILE', 'MANAGE_USERS']
      },
      {
        username: 'user',
        password: 'password',
        email: 'user@reki.com',
        role: 'user',
        roles: ['USER'],
        permissions: ['READ_PROFILE', 'EDIT_PROFILE']
      },
      {
        username: 'testuser',
        password: 'TestPassword123!',
        email: 'test@example.com',
        role: 'user',
        roles: ['USER'],
        permissions: ['READ_PROFILE']
      }
    ];

    for (const userData of testUsers) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      const existingUser = await db('users').where('username', userData.username).first();
      
      if (existingUser) {
        console.log(`‚ö†Ô∏è  User ${userData.username} already exists, skipping...`);
        continue;
      }

      // –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
      const saltRounds = 10;
      const passwordHash = await bcrypt.hash(userData.password, saltRounds);
      
      const userId = uuidv4();

      // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–µ users
      await db('users').insert({
        id: userId,
        username: userData.username,
        email: userData.email,
        password_hash: passwordHash,
        role: userData.role,
        roles: JSON.stringify(userData.roles),
        permissions: JSON.stringify(userData.permissions),
        first_name: userData.username.charAt(0).toUpperCase() + userData.username.slice(1),
        last_name: 'User',
        is_active: true,
        created_at: new Date(),
        updated_at: new Date()
      });

      // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ user_credentials –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      try {
        await db('user_credentials').insert({
          user_id: userId,
          password_hash: passwordHash,
          created_at: new Date(),
          updated_at: new Date()
        });
      } catch (error) {
        console.log(`‚ÑπÔ∏è  user_credentials table not found, skipping...`);
      }

      console.log(`‚úÖ Created user: ${userData.username} (${userData.email})`);
    }

    console.log('\nüéâ Test users created successfully!');
    console.log('\nüìã Available credentials:');
    console.log('  ‚Ä¢ admin / password');
    console.log('  ‚Ä¢ user / password');  
    console.log('  ‚Ä¢ testuser / TestPassword123!');

  } catch (error) {
    console.error('‚ùå Error creating test users:', error);
    throw error;
  } finally {
    await db.destroy();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (import.meta.url === `file://${process.argv[1]}`) {
  createTestUsers().catch(console.error);
}

export { createTestUsers };
