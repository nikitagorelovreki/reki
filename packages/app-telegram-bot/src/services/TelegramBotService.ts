import { ApiService } from './ApiService';
import { Device, DeviceStatus } from '../types/device.types';

export interface TelegramTicket {
  id: string;
  description: string;
  userId: number;
  userName: string;
  deviceId?: string;
  status: 'open' | 'in_progress' | 'resolved';
  createdAt: Date;
  updatedAt: Date;
}

export class TelegramBotService {
  constructor(private readonly apiService: ApiService) {}

  /**
   * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞
   */
  async registerDevice(deviceData: {
    id: string;
    location: string;
    registeredBy: string;
  }): Promise<Device> {
    const createDeviceRequest = {
      serial: deviceData.id,
      model: '–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ',
      status: DeviceStatus.REGISTERED,
      currentLocation: deviceData.location,
      maintenanceNotes: {
        registeredVia: 'telegram_bot',
        registeredBy: deviceData.registeredBy,
        registrationDate: new Date().toISOString(),
      },
    };

    return this.apiService.createDevice(createDeviceRequest);
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞
   */
  async createTicket(ticketData: {
    description: string;
    userId: number;
    userName: string;
    deviceId?: string;
  }): Promise<TelegramTicket> {
    const ticket: TelegramTicket = {
      id: `TICKET-${Date.now()}`,
      description: ticketData.description,
      userId: ticketData.userId,
      userName: ticketData.userName,
      ...(ticketData.deviceId ? { deviceId: ticketData.deviceId } : {}),
      status: 'open',
      createdAt: new Date(),
      updatedAt: new Date(),
    };

    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    // await this.ticketRepository.save(ticket);

    return ticket;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
   */
  async getDeviceStatus(deviceId: string): Promise<Device | null> {
    return this.apiService.getDeviceById(deviceId);
  }

  /**
   * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
   */
  validateDeviceId(deviceId: string): boolean {
    return /^DEV-\d+$/.test(deviceId);
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ –¥–ª—è Telegram
   */
  formatDeviceInfo(device: Device): string {
    return [
      `üìä –°—Ç–∞—Ç—É—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ ${device.id}:`,
      '',
      `üîß –°—Ç–∞—Ç—É—Å: ${device.status}`,
      `üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: ${device.currentLocation || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}`,
      `üìÖ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${device.lastSeenAt ? new Date(device.lastSeenAt).toLocaleString() : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`,
      device.status === DeviceStatus.ACTIVE || device.status === DeviceStatus.REGISTERED
        ? '‚úÖ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ'
        : '‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è',
    ].join('\n');
  }
}
