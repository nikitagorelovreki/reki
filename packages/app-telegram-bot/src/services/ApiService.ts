import axios, { AxiosInstance } from 'axios';
import { Device, DeviceStatus } from '../types/device.types';

export interface ApiResponse<T> {
  data: T;
  pagination?: {
    page: number;
    limit: number;
    total: number;
    totalPages: number;
  };
}

export interface CreateDeviceRequest {
  serial: string;
  model: string;
  status?: DeviceStatus;
  currentLocation?: string;
  clinicId?: string;
  maintenanceNotes?: Record<string, any>;
}

export interface TelegramTicket {
  id: string;
  description: string;
  userId: number;
  userName: string;
  deviceId?: string;
  status: 'open' | 'in_progress' | 'resolved';
  createdAt: Date;
  updatedAt: Date;
}

export class ApiService {
  private readonly apiClient: AxiosInstance;
  private readonly baseUrl: string;

  constructor() {
    this.baseUrl = process.env.API_BASE_URL || 'http://localhost:3002/api';
    this.apiClient = axios.create({
      baseURL: this.baseUrl,
      timeout: 10000,
      headers: {
        'Content-Type': 'application/json',
      },
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
    this.apiClient.interceptors.request.use(
      config => {
        console.log(
          `üåê API Request: ${config.method?.toUpperCase()} ${config.url}`
        );
        return config;
      },
      error => {
        console.error('‚ùå API Request Error:', error);
        return Promise.reject(error);
      }
    );

    this.apiClient.interceptors.response.use(
      response => {
        console.log(
          `‚úÖ API Response: ${response.status} ${response.config.url}`
        );
        return response;
      },
      error => {
        console.error(
          '‚ùå API Response Error:',
          error.response?.status,
          error.response?.data
        );
        return Promise.reject(error);
      }
    );
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —á–µ—Ä–µ–∑ API
   */
  async createDevice(deviceData: CreateDeviceRequest): Promise<Device> {
    try {
      const response = await this.apiClient.post<Device>(
        '/devices',
        deviceData
      );
      return response.data;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:', error);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ');
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ ID —á–µ—Ä–µ–∑ API
   */
  async getDeviceById(deviceId: string): Promise<Device | null> {
    try {
      const response = await this.apiClient.get<Device>(`/devices/${deviceId}`);
      return response.data;
    } catch (error: any) {
      if (error.response?.status === 404) {
        return null;
      }
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:', error);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ');
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ —Å–µ—Ä–∏–π–Ω–æ–º—É –Ω–æ–º–µ—Ä—É —á–µ—Ä–µ–∑ API
   */
  async getDeviceBySerial(serial: string): Promise<Device | null> {
    try {
      const response = await this.apiClient.get<Device>(
        `/devices/serial/${serial}`
      );
      return response.data;
    } catch (error: any) {
      if (error.response?.status === 404) {
        return null;
      }
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ —Å–µ—Ä–∏–π–Ω–æ–º—É –Ω–æ–º–µ—Ä—É:', error);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ');
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —á–µ—Ä–µ–∑ API
   */
  async updateDeviceStatus(
    deviceId: string,
    status: DeviceStatus
  ): Promise<Device> {
    try {
      const response = await this.apiClient.patch<Device>(
        `/devices/${deviceId}/status/${status}`
      );
      return response.data;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:', error);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞');
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π —á–µ—Ä–µ–∑ API
   */
  async getAllDevices(
    page: number = 1,
    limit: number = 10
  ): Promise<ApiResponse<Device[]>> {
    try {
      const response = await this.apiClient.get<ApiResponse<Device[]>>(
        '/devices',
        {
          params: { page, limit },
        }
      );
      return response.data;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤:', error);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤');
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ —Å—Ç–∞—Ç—É—Å—É —á–µ—Ä–µ–∑ API
   */
  async getDevicesByStatus(
    status: DeviceStatus,
    page: number = 1,
    limit: number = 10
  ): Promise<ApiResponse<Device[]>> {
    try {
      const response = await this.apiClient.get<ApiResponse<Device[]>>(
        `/devices/status/${status}`,
        {
          params: { page, limit },
        }
      );
      return response.data;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –ø–æ —Å—Ç–∞—Ç—É—Å—É:', error);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ —Å—Ç–∞—Ç—É—Å—É');
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É (–∑–∞–≥–ª—É—à–∫–∞ - –≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –±—É–¥–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π API)
   */
  async createTicket(ticketData: {
    description: string;
    userId: number;
    userName: string;
    deviceId?: string;
  }): Promise<TelegramTicket> {
    // –ü–æ–∫–∞ —Å–æ–∑–¥–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ
    // –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–æ–≤
    const ticket: TelegramTicket = {
      id: `TICKET-${Date.now()}`,
      description: ticketData.description,
      userId: ticketData.userId,
      userName: ticketData.userName,
      ...(ticketData.deviceId ? { deviceId: ticketData.deviceId } : {}),
      status: 'open',
      createdAt: new Date(),
      updatedAt: new Date(),
    };

    console.log('üìù –°–æ–∑–¥–∞–Ω–æ –æ–±—Ä–∞—â–µ–Ω–∏–µ:', ticket);
    return ticket;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API —Å–µ—Ä–≤–µ—Ä–∞
   */
  async healthCheck(): Promise<boolean> {
    try {
      await this.apiClient.get('/devices');
      return true;
    } catch (error) {
      console.error('‚ùå API —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error);
      return false;
    }
  }
}
