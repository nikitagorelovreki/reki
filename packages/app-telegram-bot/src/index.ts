import { Context, Telegraf } from 'telegraf';
import { config } from 'dotenv';
import { DeviceStatus } from './types/device.types';
import { ApiService } from './services/ApiService';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
config();

const bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN || '');
const apiService = new ApiService();

// –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
interface UserState {
  step:
    | 'idle'
    | 'waiting_device_id'
    | 'waiting_location'
    | 'waiting_description';
  deviceId?: string;
  location?: string;
  description?: string;
}

const userStates = new Map<number, UserState>();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function initUserState(userId: number): void {
  if (!userStates.has(userId)) {
    userStates.set(userId, { step: 'idle' });
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
bot.start(async (ctx: Context) => {
  const userId = ctx.from?.id;
  if (!userId) return;

  initUserState(userId);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
  const isApiAvailable = await apiService.healthCheck();

  await ctx.reply(
    'ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–º–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏ Reki!\n\n' +
      '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n' +
      '/register_device - –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ\n' +
      '/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n\n' +
      '–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–∞–∂–º–∏—Ç–µ /register_device' +
      (isApiAvailable ? '' : '\n\n‚ö†Ô∏è API —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')
  );
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
bot.help(async (ctx: Context) => {
  await ctx.reply(
    'üìã –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:\n\n' +
      'üîß /register_device - –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ\n' +
      'üìù /create_ticket - –°–æ–∑–¥–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É\n' +
      'üìä /device_status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞\n' +
      'üìã /list_devices - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤\n' +
      '‚ùì /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n' +
      '–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register_device'
  );
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
bot.command('register_device', async (ctx: Context) => {
  const userId = ctx.from?.id;
  if (!userId) return;

  initUserState(userId);
  const state = userStates.get(userId)!;
  state.step = 'waiting_device_id';

  await ctx.reply(
    'üîß –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞\n\n' +
      '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: DEV-001-2024):'
  );
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—Ä–∞—â–µ–Ω–∏—è
bot.command('create_ticket', async (ctx: Context) => {
  const userId = ctx.from?.id;
  if (!userId) return;

  initUserState(userId);
  const state = userStates.get(userId)!;
  state.step = 'waiting_description';

  await ctx.reply(
    'üìù –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É\n\n' + '–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –≤–æ–ø—Ä–æ—Å:'
  );
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
bot.command('device_status', async (ctx: Context) => {
  const userId = ctx.from?.id;
  if (!userId) return;

  await ctx.reply(
    'üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞\n\n' +
      '–í–≤–µ–¥–∏—Ç–µ —Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:'
  );
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —Å–ø–∏—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
bot.command('list_devices', async (ctx: Context) => {
  try {
    const devices = await apiService.getAllDevices(1, 5);

    if (!devices.data || devices.data.length === 0) {
      await ctx.reply('üìã –£—Å—Ç—Ä–æ–π—Å—Ç–≤ –≤ —Å–∏—Å—Ç–µ–º–µ –ø–æ–∫–∞ –Ω–µ—Ç.');
      return;
    }

    const deviceList = devices.data
      .map(device => `üîß ${device.serial} - ${device.model} (${device.status})`)
      .join('\n');

    await ctx.reply(
      'üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤ —Å–∏—Å—Ç–µ–º–µ:\n\n' +
        deviceList +
        '\n\n–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å.'
    );
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤:', error);
    await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤.');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('text', async (ctx: Context) => {
  const userId = ctx.from?.id;
  const text =
    ctx.message && 'text' in ctx.message
      ? (ctx.message as { text: string }).text
      : undefined;

  if (!userId || !text) return;

  initUserState(userId);
  const state = userStates.get(userId)!;

  try {
    switch (state.step) {
      case 'waiting_device_id':
        await handleDeviceIdInput(ctx, text, state);
        break;

      case 'waiting_location':
        await handleLocationInput(ctx, text, state);
        break;

      case 'waiting_description':
        await handleDescriptionInput(ctx, text, state);
        break;

      default:
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∑–∞–ø—Ä–æ—Å–æ–º —Å—Ç–∞—Ç—É—Å–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        if (text.match(/^DEV-[\w-]+$/)) {
          await handleDeviceStatusCheck(ctx, text);
        } else {
          await ctx.reply(
            '‚ùì –ù–µ –ø–æ–Ω–∏–º–∞—é –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.'
          );
        }
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
async function handleDeviceIdInput(
  ctx: Context,
  deviceId: string,
  state: UserState
) {
  if (!deviceId.match(/^DEV-[\w-]+$/)) {
    await ctx.reply(
      '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–µ—Ä–∏–π–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç DEV-XXX-YYYY (–Ω–∞–ø—Ä–∏–º–µ—Ä: DEV-001-2024):'
    );
    return;
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å —Ç–∞–∫–∏–º —Å–µ—Ä–∏–π–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º
  try {
    const existingDevice = await apiService.getDeviceBySerial(deviceId);
    if (existingDevice) {
      await ctx.reply(
        `‚ùå –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å —Å–µ—Ä–∏–π–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º ${deviceId} —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –≤ —Å–∏—Å—Ç–µ–º–µ.\n` +
          '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.'
      );
      return;
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:', error);
  }

  state.deviceId = deviceId;
  state.step = 'waiting_location';

  await ctx.reply(
    'üìç –£–∫–∞–∂–∏—Ç–µ –º–µ—Å—Ç–æ–Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:\n\n' +
      '–ù–∞–ø—Ä–∏–º–µ—Ä: –ö–∞–±–∏–Ω–µ—Ç 205, 2 —ç—Ç–∞–∂, –≥–ª–∞–≤–Ω—ã–π –∫–æ—Ä–ø—É—Å'
  );
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
async function handleLocationInput(
  ctx: Context,
  location: string,
  state: UserState
) {
  if (!state.deviceId) {
    await ctx.reply(
      '‚ùå –û—à–∏–±–∫–∞: —Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /register_device'
    );
    return;
  }

  state.location = location;
  state.step = 'idle';

  // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —á–µ—Ä–µ–∑ API
  try {
    const deviceData = {
      serial: state.deviceId,
      model: '–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ',
      status: DeviceStatus.REGISTERED,
      currentLocation: location,
      maintenanceNotes: {
        registeredVia: 'telegram_bot',
        registeredBy: ctx.from?.username || 'unknown',
        registrationDate: new Date().toISOString(),
      },
    };

    const device = await apiService.createDevice(deviceData);

    await ctx.reply(
      '‚úÖ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ!\n\n' +
        `üìã –°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä: ${device.serial}\n` +
        `üîß –ú–æ–¥–µ–ª—å: ${device.model}\n` +
        `üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: ${device.currentLocation}\n` +
        `üìä –°—Ç–∞—Ç—É—Å: ${device.status}\n\n` +
        '–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n' +
        '/create_ticket - –°–æ–∑–¥–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ\n' +
        '/device_status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å\n' +
        '/register_device - –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –µ—â–µ –æ–¥–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ'
    );

    // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    delete state.deviceId;
    delete state.location;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:', error);
    
    // –ë–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    let errorMessage = '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞. ';
    
    if (error instanceof Error) {
      if (error.message.includes('timeout')) {
        errorMessage += '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.';
      } else if (error.message.includes('Network Error') || error.message.includes('ECONNREFUSED')) {
        errorMessage += '–°–µ—Ä–≤–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
      } else if (error.message.includes('400')) {
        errorMessage += '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä –∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ.';
      } else if (error.message.includes('409')) {
        errorMessage += '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å —Ç–∞–∫–∏–º —Å–µ—Ä–∏–π–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.';
      } else {
        errorMessage += '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.';
      }
    } else {
      errorMessage += '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.';
    }
    
    await ctx.reply(errorMessage);
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã
async function handleDescriptionInput(
  ctx: Context,
  description: string,
  state: UserState
) {
  state.description = description;
  state.step = 'idle';

  try {
    // –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ API —Å–µ—Ä–≤–∏—Å
    const ticket = await apiService.createTicket({
      description: description,
      userId: ctx.from?.id || 0,
      userName: ctx.from?.username || 'unknown',
      ...(state.deviceId ? { deviceId: state.deviceId } : {}),
    });

    await ctx.reply(
      '‚úÖ –û–±—Ä–∞—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É —Å–æ–∑–¥–∞–Ω–æ!\n\n' +
        `üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${description}\n` +
        `üÜî –ù–æ–º–µ—Ä –æ–±—Ä–∞—â–µ–Ω–∏—è: ${ticket.id}\n` +
        `üìä –°—Ç–∞—Ç—É—Å: ${ticket.status}\n\n` +
        '–ù–∞—à–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã —Ä–∞—Å—Å–º–æ—Ç—Ä—è—Ç –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.'
    );

    // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    delete state.description;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—Ä–∞—â–µ–Ω–∏—è:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
async function handleDeviceStatusCheck(ctx: Context, deviceId: string) {
  try {
    const device = await apiService.getDeviceBySerial(deviceId);

    if (!device) {
      await ctx.reply(
        `‚ùå –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ ${deviceId} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å–∏—Å—Ç–µ–º–µ.\n` +
          '–í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–æ –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ.'
      );
      return;
    }

    const statusEmoji =
      device.status === DeviceStatus.ACTIVE ||
      device.status === DeviceStatus.REGISTERED
        ? '‚úÖ'
        : '‚ö†Ô∏è';

    await ctx.reply(
      `üìä –°—Ç–∞—Ç—É—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ ${device.serial}:\n\n` +
        `üîß –ú–æ–¥–µ–ª—å: ${device.model}\n` +
        `üìä –°—Ç–∞—Ç—É—Å: ${device.status}\n` +
        `üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: ${device.currentLocation || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n` +
        `üìÖ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${device.lastSeenAt?.toLocaleString() || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n` +
        `${statusEmoji} ${
          device.status === DeviceStatus.ACTIVE ||
          device.status === DeviceStatus.REGISTERED
            ? '–í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ'
            : '–¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è'
        }`
    );
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.');
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
bot.catch((err: any, ctx: Context) => {
  console.error('–û—à–∏–±–∫–∞ –±–æ—Ç–∞:', err);
  ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async function startBot() {
  try {
    console.log('ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API —Å–µ—Ä–≤–µ—Ä–∞
    const isApiAvailable = await apiService.healthCheck();
    if (!isApiAvailable) {
      console.warn(
        '‚ö†Ô∏è API —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ë–æ—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ.'
      );
    }

    await bot.launch();
    console.log('‚úÖ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!');

    // Graceful stop
    process.once('SIGINT', () => bot.stop('SIGINT'));
    process.once('SIGTERM', () => bot.stop('SIGTERM'));
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –µ—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (import.meta.url === `file://${process.argv[1]}`) {
  startBot();
}

export { bot, startBot };
