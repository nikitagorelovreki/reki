name: Deploy to Google Cloud Engine

on:
  push:
    branches: [main, staging]
  pull_request:
    branches: [main]

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}
  CLUSTER_NAME: reki-cluster
  CLUSTER_ZONE: us-central1-a

jobs:
  # Build and test
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npx turbo test --filter='[HEAD^1]'

      - name: Lint code
        run: npx turbo lint --filter='[HEAD^1]'

  # Build and deploy to GCP
  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging'
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Google Cloud CLI
        uses: google-github-actions/setup-gcloud@v1
        with:
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Configure Docker for GCR
        run: gcloud auth configure-docker

      - name: Get GKE credentials
        run: |
          gcloud container clusters get-credentials $CLUSTER_NAME \
            --zone $CLUSTER_ZONE \
            --project $PROJECT_ID

      - name: Build Docker images
        run: |
          # Build Core Server
          docker build -f packages/app-core-server/Dockerfile \
            -t gcr.io/$PROJECT_ID/reki-core:$GITHUB_SHA \
            -t gcr.io/$PROJECT_ID/reki-core:latest .
          
          # Build Auth Server
          docker build -f packages/app-auth-server/Dockerfile \
            -t gcr.io/$PROJECT_ID/reki-auth:$GITHUB_SHA \
            -t gcr.io/$PROJECT_ID/reki-auth:latest .

      - name: Push Docker images
        run: |
          docker push gcr.io/$PROJECT_ID/reki-core:$GITHUB_SHA
          docker push gcr.io/$PROJECT_ID/reki-core:latest
          docker push gcr.io/$PROJECT_ID/reki-auth:$GITHUB_SHA
          docker push gcr.io/$PROJECT_ID/reki-auth:latest

      - name: Deploy to GKE
        run: |
          # Set namespace based on branch
          if [ "$GITHUB_REF" = "refs/heads/main" ]; then
            NAMESPACE="reki-production"
          else
            NAMESPACE="reki-staging"
          fi
          
          # Create namespace if it doesn't exist
          kubectl create namespace $NAMESPACE --dry-run=client -o yaml | kubectl apply -f -
          
          # Update deployment with new image tags
          sed "s/PROJECT_ID/$PROJECT_ID/g; s/:latest/:$GITHUB_SHA/g" deployment/gce-deployment.yml | \
            kubectl apply -f - -n $NAMESPACE
          
          # Wait for rollout to complete
          kubectl rollout status deployment/reki-core-server -n $NAMESPACE --timeout=300s
          kubectl rollout status deployment/reki-auth-server -n $NAMESPACE --timeout=300s

      - name: Run database migrations
        if: github.ref == 'refs/heads/main'
        run: |
          # Run migrations via job
          kubectl create job migration-$GITHUB_SHA \
            --from=cronjob/database-migration \
            -n reki-production || true

  # Deploy frontend to Firebase
  deploy-frontend:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd packages/app-control-panel
          npm ci

      - name: Build frontend
        run: |
          cd packages/app-control-panel
          echo "REACT_APP_AUTH_API_URL=${{ secrets.AUTH_API_URL }}" > .env.production
          echo "REACT_APP_CORE_API_URL=${{ secrets.CORE_API_URL }}" >> .env.production
          npm run build

      - name: Deploy to Firebase
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: '${{ secrets.GITHUB_TOKEN }}'
          firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT }}'
          projectId: ${{ secrets.GCP_PROJECT_ID }}
          channelId: live
