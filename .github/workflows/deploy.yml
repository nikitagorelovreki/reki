name: Deploy Reki Services

on:
  push:
    branches: [main, staging, develop]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '18'
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  TURBO_TEAM: ${{ secrets.TURBO_TEAM }}

jobs:
  # Build and test all packages
  build-and-test:
    runs-on: ubuntu-latest
    outputs:
      affected: ${{ steps.turbo.outputs.affected }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build affected packages
        id: turbo
        run: |
          npx turbo build --filter='[HEAD^1]'
          echo "affected=$(npx turbo run build --filter='[HEAD^1]' --dry-run=json | jq -r '.tasks[].package' | tr '\n' ',' | sed 's/,$//')" >> $GITHUB_OUTPUT

      - name: Run tests
        run: npx turbo test --filter='[HEAD^1]'

      - name: Lint code
        run: npx turbo lint --filter='[HEAD^1]'

  # Deploy Frontend to Vercel
  deploy-frontend:
    needs: build-and-test
    if: contains(needs.build-and-test.outputs.affected, '@reki/app-control-panel')
    runs-on: ubuntu-latest
    environment: 
      name: ${{ github.ref_name }}
      url: ${{ steps.vercel.outputs.preview-url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Deploy to Vercel
        id: vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.ORG_ID }}
          vercel-project-id: ${{ secrets.PROJECT_ID }}
          working-directory: packages/app-control-panel
          scope: ${{ secrets.TEAM_ID }}

  # Deploy Backend Services
  deploy-backend:
    needs: build-and-test
    if: contains(needs.build-and-test.outputs.affected, '@reki/app-core-server') || contains(needs.build-and-test.outputs.affected, '@reki/app-auth-server')
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [core-server, auth-server]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build Docker image
        run: |
          docker build -f packages/app-${{ matrix.service }}/Dockerfile \
            -t ${{ matrix.service }}:${{ github.sha }} .

      - name: Deploy to Railway
        run: |
          railway login --token ${{ secrets.RAILWAY_TOKEN }}
          railway up -s ${{ matrix.service }} --detach

  # Database migrations
  migrate-database:
    needs: build-and-test
    if: contains(needs.build-and-test.outputs.affected, '@reki/core-persistence')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run migrations
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: |
          cd packages/core-persistence
          npx knex migrate:latest
